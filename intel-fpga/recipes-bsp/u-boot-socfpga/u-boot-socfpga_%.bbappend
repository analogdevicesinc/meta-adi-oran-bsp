DESCRIPTION = "Analog Devices Inc. board config files for U-Boot"
AUTHOR = "Kim Clemensen Holdt <kim.holdt@analog.com>"
SECTION = "bootloaders"
LICENSE = "MIT"

#use adi-u-boot-scr'to generate u-boot.scr if not building with ATF
DEPENDS:append = " dos2unix"
DEPENDS:append = "${@bb.utils.contains('ADI_CC_TFA','1',' ', ' adi-u-boot-scr', d)}"

FILESEXTRAPATHS:prepend := "${THISDIR}:"
FILESEXTRAPATHS:prepend := "${THISDIR}/adi-u-boot-scr:"

# it sets root= bootargs to use MMC as 
SRC_URI:append:adrv904x-rd-ru = " \
    file://files/socfpga_adrv904x-rd-ru.dtsi \
    file://files/socfpga_adrv904x-rd-ru_socdk.dts \
    file://files/socfpga_adrv904x-rd-ru_socdk-u-boot.dtsi \
    file://files/socfpga_adrv904x-rd-ru-u-boot.dtsi \
    "
#use customized u-boot configuration that supports both uart0 and uart1
#disable it for now, use default socfpga_soc64_fit-u-boot.dtsi
#which requires one bl32.bin only, it is built to use uart1
SRC_URI:append= "${@bb.utils.contains('ADI_CC_TFA','1',' file://files/0001-socfpga_soc64_fit-u-boot.dtsi.patch', ' ', d)}"

# Include these files only when building with ATF included
# adi-uboot-scr recipe provides u-boot.scr when ATF is not included
UBOOT_TXT_FILE:adrv904x-rd-ru = "${@bb.utils.contains('ADI_CC_TFA', '1', 'adrv904x-rd-ru-u-boot-atf.txt', 'adrv904x-rd-ru-u-boot.txt', d)}"
SRC_URI:append = " file://files/${UBOOT_TXT_FILE}"

# defconfig used to build u-boot
def_config_file:adrv904x-rd-ru = "${@bb.utils.contains('ADI_CC_TFA', '1', 'socfpga_agilex_atf_defconfig', 'socfpga_agilex_defconfig', d)}"

# defconfig patch with non-ATF or ATF included
DEFCONFIG_PATCH="0001-${def_config_file}.patch"
SRC_URI:append = " file://files/${DEFCONFIG_PATCH} "

def_config_build ?= "socfpga_${MACHINE}_defconfig"

fn_copy_configs () {
    #copy default config for machine selected
    cp ${S}/configs/${def_config_file} ${S}/configs/${def_config_build}
    
}

fn_copy_configs_adrv904x_rd_ru () {
    fn_copy_configs
    # ADRV904X-RD-RU
    sed -i 's/kerberos/adrv904x-rd-ru/g' ${S}/configs/${def_config_build}
    cp ${WORKDIR}/files/socfpga_adrv904x-rd-ru_socdk.dts ${S}/arch/arm/dts/socfpga_adrv904x-rd-ru_socdk.dts
    cp ${WORKDIR}/files/socfpga_adrv904x-rd-ru.dtsi ${S}/arch/arm/dts/socfpga_adrv904x-rd-ru.dtsi
    cp ${WORKDIR}/files/socfpga_adrv904x-rd-ru_socdk-u-boot.dtsi ${S}/arch/arm/dts/socfpga_adrv904x-rd-ru_socdk-u-boot.dtsi
    cp ${WORKDIR}/files/socfpga_adrv904x-rd-ru-u-boot.dtsi ${S}/arch/arm/dts/socfpga_adrv904x-rd-ru-u-boot.dtsi
    sed -i '/socfpga_agilex_socdk\.dtb/a \\tsocfpga_adrv904x-rd-ru_socdk.dtb \\' ${S}/arch/arm/dts/Makefile
    sed -i 's/socfpga_agilex_socdk/socfpga_adrv904x-rd-ru_socdk/g' ${S}/arch/arm/mach-socfpga/Kconfig
    cp ${S}/include/configs/socfpga_agilex_socdk.h ${S}/include/configs/socfpga_adrv904x-rd-ru_socdk.h
}

do_patch:append:adrv904x-rd-ru() {
    bb.build.exec_func('fn_copy_configs_adrv904x_rd_ru', d)
}

addtask do_deploy after do_install before do_package

UBOOT_CONFIG[adrv904x-rd-ru] = "socfpga_adrv904x-rd-ru_defconfig"

#incorporate ATF
#binman tool is used to package ATF and Uboot
#it requires python module: pkg_resources
DEPENDS:append = "${@bb.utils.contains('ADI_CC_TFA','1',' python3-setuptools-native', ' ', d)}"
DEPENDS:append = "${@bb.utils.contains('ADI_CC_TFA','1',' arm-trusted-firmware', ' ', d)}"

task_dep = ""
task_dep:append = "${@bb.utils.contains('ADI_CC_TFA','1',' arm-trusted-firmware:do_deploy', ' ', d)}"
task_dep:append = "${@bb.utils.contains('ADI_CC_TFA','1',' virtual/kernel:do_deploy', ' ', d)}"
do_compile[depends] = "${task_dep}"

do_compile:prepend() {
    if ${@bb.utils.contains('ADI_CC_TFA', '1', 'true', 'false', d)}; then
        cp ${DEPLOY_DIR_IMAGE}/bl31.bin ${B}/${def_config_build}/
        cp ${DEPLOY_DIR_IMAGE}/bl31.bin ${B}/${def_config_build}/bl31-uart1.bin
        cp ${DEPLOY_DIR_IMAGE}/${KERNEL_IMAGETYPE} ${B}/${def_config_build}/
        cp ${DEPLOY_DIR_IMAGE}/socfpga_${MACHINE}_socdk.dtb ${B}/${def_config_build}/linux.dtb
        #cp u-boot.txt in build dir,  u-boot binman tool will generate u-boot.scr
        #this u-boot.scr is different from the one generated by the adi-u-boot-scr recipe
        cp ${WORKDIR}/files/${UBOOT_TXT_FILE} ${WORKDIR}/files/${MACHINE}-u-boot.txt
        /usr/bin/dos2unix ${WORKDIR}/files/${MACHINE}-u-boot.txt
        cp ${WORKDIR}/files/${MACHINE}-u-boot.txt ${B}/${def_config_build}/u-boot.txt
    fi
}

do_deploy:append() {
    if ${@bb.utils.contains('ADI_CC_TFA', '1', 'true', 'false', d)}; then
        install -m 0644 ${B}/${def_config_build}/u-boot.itb ${DEPLOYDIR}
        install -m 0644 ${B}/${def_config_build}/kernel.itb ${DEPLOYDIR}
        install -m 0644 ${B}/${def_config_build}/u-boot.scr ${DEPLOYDIR}
    fi
}
