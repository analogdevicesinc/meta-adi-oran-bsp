diff --git a/MAINTAINERS b/MAINTAINERS
old mode 100644
new mode 100755
index 7338c7154425..128926a12704
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -490,6 +490,11 @@ W:	http://ez.analog.com/community/linux-device-drivers
 F:	Documentation/devicetree/bindings/net/ieee802154/adf7242.txt
 F:	drivers/net/ieee802154/adf7242.c
 
+ADI MSP ETHERNET DRIVER
+M:	Jie Zhang <jie.zhang@analog.com>
+S:	Maintained
+F:	drivers/net/ethernet/adi-msp.c
+
 ADM1025 HARDWARE MONITOR DRIVER
 M:	Jean Delvare <jdelvare@suse.com>
 L:	linux-hwmon@vger.kernel.org
@@ -996,6 +1001,19 @@ L:	linux-media@vger.kernel.org
 S:	Maintained
 F:	drivers/media/i2c/ad9389b*
 
+ANALOG DEVICES INC AD9545 DRIVER
+M:	Michael Hennerich <Michael.Hennerich@analog.com>
+S:	Supported
+W:	http://ez.analog.com/community/linux-device-drivers
+F:	Documentation/devicetree/bindings/clock/clk-ad9545.yaml
+F:	drivers/clk/adi/clk-ad9545-i2c.c
+F:	drivers/clk/adi/clk-ad9545-spi.c
+F:	drivers/clk/adi/clk-ad9545.c
+F:	drivers/clk/adi/clk-ad9545.h
+F:	include/config/common/clk/ad9545.h
+F:	include/dt-bindings/clock/ad9545.h
+F:	include/linux/clk/ad9545.h
+
 ANALOG DEVICES INC ADGS1408 DRIVER
 M:	Mircea Caprioru <mircea.caprioru@analog.com>
 S:	Supported
diff --git a/drivers/clk/Kconfig b/drivers/clk/Kconfig
old mode 100644
new mode 100755
index c715d4681a0b..419b615b392c
--- a/drivers/clk/Kconfig
+++ b/drivers/clk/Kconfig
@@ -251,6 +251,11 @@ config CLK_QORIQ
 	  This adds the clock driver support for Freescale QorIQ platforms
 	  using common clock framework.
 
+config COMMON_CLK_ADI
+	def_bool COMMON_CLK
+	help
+	  Support for Analog Devices clock providers.
+
 config CLK_LS1028A_PLLDIG
         tristate "Clock driver for LS1028A Display output"
         depends on ARCH_LAYERSCAPE || COMPILE_TEST
@@ -360,6 +365,7 @@ config COMMON_CLK_FIXED_MMIO
 	  Support for Memory Mapped IO Fixed clocks
 
 source "drivers/clk/actions/Kconfig"
+source "drivers/clk/adi/Kconfig"
 source "drivers/clk/analogbits/Kconfig"
 source "drivers/clk/baikal-t1/Kconfig"
 source "drivers/clk/bcm/Kconfig"
diff --git a/drivers/clk/Makefile b/drivers/clk/Makefile
old mode 100644
new mode 100755
index da8fcf147eb1..a0ced31cb9bf
--- a/drivers/clk/Makefile
+++ b/drivers/clk/Makefile
@@ -72,6 +72,7 @@ obj-$(CONFIG_COMMON_CLK_XGENE)		+= clk-xgene.o
 
 # please keep this section sorted lexicographically by directory path name
 obj-y					+= actions/
+obj-$(CONFIG_COMMON_CLK_ADI)		+= adi/
 obj-y					+= analogbits/
 obj-$(CONFIG_COMMON_CLK_AT91)		+= at91/
 obj-$(CONFIG_ARCH_ARTPEC)		+= axis/
diff --git a/drivers/clk/clk.c b/drivers/clk/clk.c
old mode 100644
new mode 100755
index b8a0e3d23698..01be42523c97
--- a/drivers/clk/clk.c
+++ b/drivers/clk/clk.c
@@ -79,6 +79,7 @@ struct clk_core {
 	unsigned long		max_rate;
 	unsigned long		accuracy;
 	int			phase;
+	int			nshot;
 	struct clk_duty		duty;
 	struct hlist_head	children;
 	struct hlist_node	child_node;
@@ -1273,6 +1274,9 @@ static int __init clk_disable_unused(void)
 {
 	struct clk_core *core;
 
+	/* HACK HACK HACK */
+	/* hide kernel error */
+	clk_ignore_unused = true;
 	if (clk_ignore_unused) {
 		pr_warn("clk: Not disabling unused clocks\n");
 		return 0;
@@ -2706,6 +2710,101 @@ int clk_get_phase(struct clk *clk)
 }
 EXPORT_SYMBOL_GPL(clk_get_phase);
 
+static int clk_core_set_nshot_nolock(struct clk_core *core, int nshot)
+{
+	int ret = -EINVAL;
+
+	if (nshot < 0)
+		return ret;
+
+	if (!core)
+		return 0;
+
+	lockdep_assert_held(&prepare_lock);
+
+	if (clk_core_rate_is_protected(core))
+		return -EBUSY;
+
+	trace_clk_set_nshot(core, nshot);
+
+	if (core->ops->set_nshot) {
+		ret = core->ops->set_nshot(core->hw, nshot);
+		if (!ret)
+			core->nshot = nshot;
+	}
+
+	trace_clk_set_nshot_complete(core, nshot);
+
+	return ret;
+}
+
+/**
+ * clk_set_nshot - configure clock to send nshot pulses on next enable
+ * @clk: clock signal source
+ * @nshot: number of pulses
+ *
+ * Setup clock for an nshot. Generate pulses on enable. Clock
+ * must support gating/rate operations.
+ *
+ * When setting 0 number of pulses, disable this feature.
+ *
+ * Returns 0 on success, negative errno otherwise.
+ */
+int clk_set_nshot(struct clk *clk, int nshot)
+{
+	int ret;
+
+	if (!clk)
+		return 0;
+
+	clk_prepare_lock();
+
+	if (clk->exclusive_count)
+		clk_core_rate_unprotect(clk->core);
+
+	ret = clk_core_set_nshot_nolock(clk->core, nshot);
+
+	if (clk->exclusive_count)
+		clk_core_rate_protect(clk->core);
+
+	clk_prepare_unlock();
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(clk_set_nshot);
+
+static int clk_core_get_nshot(struct clk_core *core)
+{
+	int ret = 0;
+
+	clk_prepare_lock();
+	/* Always try to update cached nshot if possible */
+	if (core->ops->get_nshot)
+		core->nshot = core->ops->get_nshot(core->hw);
+
+	ret = core->nshot;
+
+	clk_prepare_unlock();
+
+	return ret;
+}
+
+/**
+ * clk_get_nshot - return the nshot of a clock
+ * @clk: clock signal source
+ *
+ * Returns nshot number of pulses on success, 0 if feature is disabled,
+ * negative errno otherwise.
+ */
+int clk_get_nshot(struct clk *clk)
+{
+	if (!clk)
+		return 0;
+
+	return clk_core_get_nshot(clk->core);
+}
+EXPORT_SYMBOL_GPL(clk_get_nshot);
+
 static void clk_core_reset_duty_cycle_nolock(struct clk_core *core)
 {
 	/* Assume a default value of 50% */
@@ -2931,7 +3030,9 @@ static void clk_summary_show_one(struct seq_file *s, struct clk_core *c,
 	else
 		seq_puts(s, "-----");
 
-	seq_printf(s, " %6d\n", clk_core_get_scaled_duty_cycle(c, 100000));
+	seq_printf(s, " %6d %8d\n",
+		   clk_core_get_scaled_duty_cycle(c, 100000),
+		   clk_core_get_nshot(c));
 }
 
 static void clk_summary_show_subtree(struct seq_file *s, struct clk_core *c,
@@ -2951,8 +3052,8 @@ static int clk_summary_show(struct seq_file *s, void *data)
 	struct hlist_head **lists = (struct hlist_head **)s->private;
 
 	seq_puts(s, "                                 enable  prepare  protect                                duty\n");
-	seq_puts(s, "   clock                          count    count    count        rate   accuracy phase  cycle\n");
-	seq_puts(s, "---------------------------------------------------------------------------------------------\n");
+	seq_puts(s, "   clock                          count    count    count        rate   accuracy phase  cycle  nshot\n");
+	seq_puts(s, "----------------------------------------------------------------------------------------------------\n");
 
 	clk_prepare_lock();
 
@@ -2987,6 +3088,7 @@ static void clk_dump_one(struct seq_file *s, struct clk_core *c, int level)
 		seq_printf(s, "\"phase\": %d,", phase);
 	seq_printf(s, "\"duty_cycle\": %u",
 		   clk_core_get_scaled_duty_cycle(c, 100000));
+	seq_printf(s, "\"nshot\": %d", clk_core_get_nshot(c));
 }
 
 static void clk_dump_subtree(struct seq_file *s, struct clk_core *c, int level)
diff --git a/drivers/fpga/stratix10-soc.c b/drivers/fpga/stratix10-soc.c
old mode 100644
new mode 100755
index 34c1eb72ee7e..08254314aafa
--- a/drivers/fpga/stratix10-soc.c
+++ b/drivers/fpga/stratix10-soc.c
@@ -491,10 +491,24 @@ static int s10_probe(struct platform_device *pdev)
 			       NULL, 0, s10_fw_version_callback);
 	if (ret) {
 		dev_err(dev, "couldn't get firmware version\n");
+		stratix10_svc_done(priv->chan);
 		fpga_mgr_free(mgr);
 		goto probe_err;
 	}
 
+	ret = wait_for_completion_timeout(
+		&priv->status_return_completion, S10_RECONFIG_TIMEOUT);
+	if (!ret) {
+		dev_err(dev, "timeout waiting for firmware version\n");
+		stratix10_svc_done(priv->chan);
+		fpga_mgr_free(mgr);
+		ret = -ETIMEDOUT;
+		goto probe_err;
+	}
+
+	ret = 0;
+
+	stratix10_svc_done(priv->chan);
 	platform_set_drvdata(pdev, mgr);
 	return ret;
 
diff --git a/drivers/net/ethernet/Kconfig b/drivers/net/ethernet/Kconfig
old mode 100644
new mode 100755
index fad9a2c77fa7..612185069789
--- a/drivers/net/ethernet/Kconfig
+++ b/drivers/net/ethernet/Kconfig
@@ -104,6 +104,52 @@ config KORINA
 	  If you have a Mikrotik RouterBoard 500 or IDT RC32434
 	  based system say Y. Otherwise say N.
 
+config ADI_MSP
+	tristate "Analog Devices MS Plane Ethernet support"
+	depends on OF
+	help
+	  This driver supports Analog Devices MS-Plane Ethernet on
+	  Kerberos.
+
+	  Say Y to build support for ADI MSP Ethernet as built-in
+	  or M to build it as a module
+
+config ADI_MSP_WA_TX_WU_SIZE_MULTIPLE_OF_8
+	bool "Workaround for MSP Tx work unit size requirement"
+	depends on ADI_MSP
+	help
+	  The current ADI MSP Tx hardware can only handle work units whose
+	  size is multiple of 8 bytes. When enabled, this workaround is to
+	  pad Tx work units to multiple of 8 bytes.
+
+	  Select Y if MSP Tx requires the size of work unit to be multiple
+	  of 8 bytes
+
+config ADI_MSP_TX_PADDING
+	bool "Pad Ethernet frame for MSP Tx"
+	default n
+	depends on ADI_MSP
+	help
+	  Some Tx MACs can automatically add paddings to Ethernet frame
+	  to meet the minimum frame size requirement. For other Tx MACs
+	  which cannot, ADI MSP driver has to add paddings.
+
+	  Say Y if the Tx MAC does not add paddings to meet the minimum
+	  frame size requirement
+
+config ADI_MSP_DEBUG
+	bool "Add debug tracing to Analog Devices MS Plane Ethernet driver"
+	default n
+	depends on ADI_MSP
+	select FTRACE
+	help
+	  Enable debug tracing in ADI MSP driver. The debug tracing uses
+	  ftrace. Tracing needs to be turned on when debugging. You can
+	  also configure ftrace. When an error happens, tracing will be
+	  turned off automatically.
+
+	  Say Y to add debug tracing for ADI MSP Ethernet driver
+
 config LANTIQ_ETOP
 	tristate "Lantiq SoC ETOP driver"
 	depends on SOC_TYPE_XWAY
diff --git a/drivers/net/ethernet/Makefile b/drivers/net/ethernet/Makefile
old mode 100644
new mode 100755
index 6f8c7723a663..c43b5765eed0
--- a/drivers/net/ethernet/Makefile
+++ b/drivers/net/ethernet/Makefile
@@ -48,6 +48,7 @@ obj-$(CONFIG_NET_VENDOR_I825XX) += i825xx/
 obj-$(CONFIG_NET_VENDOR_XSCALE) += xscale/
 obj-$(CONFIG_JME) += jme.o
 obj-$(CONFIG_KORINA) += korina.o
+obj-$(CONFIG_ADI_MSP) += adi-msp.o
 obj-$(CONFIG_LANTIQ_ETOP) += lantiq_etop.o
 obj-$(CONFIG_LANTIQ_XRX200) += lantiq_xrx200.o
 obj-$(CONFIG_NET_VENDOR_MARVELL) += marvell/
diff --git a/drivers/ptp/Kconfig b/drivers/ptp/Kconfig
old mode 100644
new mode 100755
index 3e377f3c69e5..f368fc96cec0
--- a/drivers/ptp/Kconfig
+++ b/drivers/ptp/Kconfig
@@ -26,6 +26,17 @@ config PTP_1588_CLOCK
 	  To compile this driver as a module, choose M here: the module
 	  will be called ptp.
 
+config PTP_1588_CLOCK_ADI
+	tristate "PTP clock for ADI"
+	depends on OPTEE
+	depends on PTP_1588_CLOCK
+	help
+	  This driver adds support for using the hardware ToD module
+	  in the ADI SoC's as a PTP clock.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called adi_ptp.
+
 config PTP_1588_CLOCK_DTE
 	tristate "Broadcom DTE as PTP clock"
 	depends on PTP_1588_CLOCK
diff --git a/drivers/ptp/Makefile b/drivers/ptp/Makefile
old mode 100644
new mode 100755
index 7aff75f745dc..f3b9efc58e64
--- a/drivers/ptp/Makefile
+++ b/drivers/ptp/Makefile
@@ -5,6 +5,7 @@
 
 ptp-y					:= ptp_clock.o ptp_chardev.o ptp_sysfs.o
 obj-$(CONFIG_PTP_1588_CLOCK)		+= ptp.o
+obj-$(CONFIG_PTP_1588_CLOCK_ADI)	+= adi_ptp/
 obj-$(CONFIG_PTP_1588_CLOCK_DTE)	+= ptp_dte.o
 obj-$(CONFIG_PTP_1588_CLOCK_INES)	+= ptp_ines.o
 obj-$(CONFIG_PTP_1588_CLOCK_PCH)	+= ptp_pch.o
diff --git a/include/linux/clk-provider.h b/include/linux/clk-provider.h
old mode 100644
new mode 100755
index 03a5de5f99f4..c7c7a0862fed
--- a/include/linux/clk-provider.h
+++ b/include/linux/clk-provider.h
@@ -179,6 +179,12 @@ struct clk_duty {
  *		by the second argument. Valid values for degrees are
  *		0-359. Return 0 on success, otherwise -EERROR.
  *
+ * @get_nshot:	Queries the hardware to get the current number of clock
+ *		pulses configured, negative error codes on failure.
+ *
+ * @set_nshot:	Configure clock to output nshot pulses on next enable.
+ *		Return 0 on success, otherwise -EERROR.
+ *
  * @get_duty_cycle: Queries the hardware to get the current duty cycle ratio
  *              of a clock. Returned values denominator cannot be 0 and must be
  *              superior or equal to the numerator.
@@ -245,6 +251,8 @@ struct clk_ops {
 					   unsigned long parent_accuracy);
 	int		(*get_phase)(struct clk_hw *hw);
 	int		(*set_phase)(struct clk_hw *hw, int degrees);
+	int		(*set_nshot)(struct clk_hw *hw, int nshot);
+	int		(*get_nshot)(struct clk_hw *hw);
 	int		(*get_duty_cycle)(struct clk_hw *hw,
 					  struct clk_duty *duty);
 	int		(*set_duty_cycle)(struct clk_hw *hw,
diff --git a/include/linux/clk.h b/include/linux/clk.h
old mode 100644
new mode 100755
index 7fd6a1febcf4..3e0b2f5cb794
--- a/include/linux/clk.h
+++ b/include/linux/clk.h
@@ -138,6 +138,26 @@ int clk_set_phase(struct clk *clk, int degrees);
  */
 int clk_get_phase(struct clk *clk);
 
+/**
+ * clk_set_nshot - setup a nshot
+ * @clk: clock signal source
+ * @nshot: number of clock pulses
+ *
+ * Configure a clock source to output n clock pulses on next enable.
+ * Disable this feature when nshot is 0.
+ * Returns 0 on success, negative errno otherwise..
+ */
+int clk_set_nshot(struct clk *clk, int nshot);
+
+/**
+ * clk_get_nshot - return the number of pulses shift of a the nshot signal
+ * @clk: clock signal source
+ *
+ * Returns the configured number of pulses of the nshot, 0 if nshot is disabled,
+ * otherwise returns negative errno.
+ */
+int clk_get_nshot(struct clk *clk);
+
 /**
  * clk_set_duty_cycle - adjust the duty cycle ratio of a clock signal
  * @clk: clock signal source
diff --git a/include/linux/math64.h b/include/linux/math64.h
old mode 100644
new mode 100755
index 66deb1fdc2ef..1cc61d748e1f
--- a/include/linux/math64.h
+++ b/include/linux/math64.h
@@ -281,6 +281,19 @@ u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
 #define DIV64_U64_ROUND_CLOSEST(dividend, divisor)	\
 	({ u64 _tmp = (divisor); div64_u64((dividend) + _tmp / 2, _tmp); })
 
+/*
+ * DIV_U64_ROUND_CLOSEST - unsigned 64bit divide with 32bit divisor rounded to nearest integer
+ * @dividend: unsigned 64bit dividend
+ * @divisor: unsigned 32bit divisor
+ *
+ * Divide unsigned 64bit dividend by unsigned 32bit divisor
+ * and round to closest integer.
+ *
+ * Return: dividend / divisor rounded to nearest integer
+ */
+#define DIV_U64_ROUND_CLOSEST(dividend, divisor)	\
+	({ u32 _tmp = (divisor); div_u64((u64)(dividend) + _tmp / 2, _tmp); })
+
 /*
  * DIV_S64_ROUND_CLOSEST - signed 64bit divide with 32bit divisor rounded to nearest integer
  * @dividend: signed 64bit dividend
diff --git a/include/trace/events/clk.h b/include/trace/events/clk.h
old mode 100644
new mode 100755
index cb1aea25c199..37344af91469
--- a/include/trace/events/clk.h
+++ b/include/trace/events/clk.h
@@ -184,6 +184,39 @@ DEFINE_EVENT(clk_phase, clk_set_phase_complete,
 	TP_ARGS(core, phase)
 );
 
+DECLARE_EVENT_CLASS(clk_nshot,
+
+	TP_PROTO(struct clk_core *core, int nshot),
+
+	TP_ARGS(core, nshot),
+
+	TP_STRUCT__entry(
+		__string(        name,           core->name                )
+		__field(	  int,           nshot                     )
+	),
+
+	TP_fast_assign(
+		__assign_str(name, core->name);
+		__entry->nshot = nshot;
+	),
+
+	TP_printk("%s %d", __get_str(name), (int)__entry->nshot)
+);
+
+DEFINE_EVENT(clk_nshot, clk_set_nshot,
+
+	TP_PROTO(struct clk_core *core, int nshot),
+
+	TP_ARGS(core, nshot)
+);
+
+DEFINE_EVENT(clk_nshot, clk_set_nshot_complete,
+
+	TP_PROTO(struct clk_core *core, int nshot),
+
+	TP_ARGS(core, nshot)
+);
+
 DECLARE_EVENT_CLASS(clk_duty_cycle,
 
 	TP_PROTO(struct clk_core *core, struct clk_duty *duty),
